<html>
<head>
    <link rel="stylesheet" type="text/css" href="~/Content/Site.css" />
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <meta name="apple-mobile-web-app-capable" content="yes">
    <script src="~/Scripts/OpenLayers-2.13.1/OpenLayers.js"></script>
    <script src="~/Scripts/jquery-1.11.3.min.js"></script>
    <script src="~/Scripts/proj4.js"></script>
    <script type="text/javascript">
        var map, layer, default_points, segments, vector_layer;
        var geoJSONParser = new OpenLayers.Format.GeoJSON();

        var nearControl, withinBoxControl;
        //TODO list:
        //Add a control for within box
        //Don't use this:
        //function y2lat(a) { return 180 / Math.PI * (2 * Math.atan(Math.exp(a * Math.PI / 180)) - Math.PI / 2); }
        //Do this:
        //proj4(map.projection.projCode, proj4.WGS84, [map.center.lon, map.center.lat])

        function extractFeatures(parsedData) {
            var features = [];

            for (var i = 0; i < parsedData.length; i++) {
                var candidateFeatures = geoJSONParser.read(parsedData[i]);
                var feature = candidateFeatures[0];
                feature.geometry = feature.geometry.transform(new OpenLayers.Projection("EPSG:4326"), map.getProjectionObject());
                features.push(feature);
            }

            return features;
        }

        function getLayer(layerId, localLayer) {
            $.ajax({
                url: '/home/layer/' + layerId,
                success: function (data) {
                    var parsedData = JSON.parse(data);
                    var features = extractFeatures(parsedData);

                    localLayer.addFeatures(features);
                    map.zoomToExtent(localLayer.getExtent());
                }
            });
        }

        function activateLayer(layerId) {
            default_points.removeAllFeatures();
            segments.removeAllFeatures();
            if (layerId === 'default') {
                getLayer(layerId, default_points);
            }

            if (layerId === 'segments') {
                getLayer(layerId, segments);
            }
        }

        function withinBox(layerId, leftCorner, rightCorner) {
            $.ajax({
                url: '/home/WithinBox/' + layerId + '?leftCorner=' + leftCorner[0] + '&leftCorner=' + leftCorner[1] + '&rightCorner=' + rightCorner[0] + '&rightCorner=' + rightCorner[1],
                success: function (data) {
                    var parsedData = JSON.parse(data);
                    var features = extractFeatures(parsedData);

                    vector_layer.addFeatures(features);
                }
            });
        }

        function near(point) {
            var layerId = $('#nearLayerSelection').val();
            var maxDistance = $('#maxDistance').val();
            var minDistance = $('#minDistance').val();

            $.ajax({
                url: '/home/Near/' + layerId + '?point=' + point[0] + '&point=' + point[1] + '&maxDistance=' + maxDistance + '&minDistance=' + minDistance,
                success: function (data) {
                    var parsedData = JSON.parse(data);
                    var features = extractFeatures(parsedData);

                    vector_layer.addFeatures(features);
                }
            });
        }

        OpenLayers.Control.NearControl = OpenLayers.Class(OpenLayers.Control, {
            defaultHandlerOptions: {
                'single': true,
                'double': false,
                'pixelTolerance': 0,
                'stopSingle': false,
                'stopDouble': false,
            },

            initialize: function (options) {
                this.handlerOptions = OpenLayers.Util.extend(
                       {}, this.defaultHandlerOptions
                   );
                OpenLayers.Control.prototype.initialize.apply(
                    this, arguments
                );
                this.handler = new OpenLayers.Handler.Click(
                    this, {
                        'click': this.trigger
                    }, this.handlerOptions
                );
            },

            trigger: function (e) {
                vector_layer.removeAllFeatures();
                var lonLat = map.getLonLatFromPixel(e.xy);
                var point = proj4(map.projection.projCode, proj4.WGS84, [lonLat.lon, lonLat.lat]);
                near(point);
            }
        });

        OpenLayers.Control.WithinBox = OpenLayers.Class(OpenLayers.Control, {
            defaultHandlerOptions: {
                'pixelTolerance': 0,
            },

            initialize: function (options) {
                this.handlerOptions = OpenLayers.Util.extend(
                       {}, this.defaultHandlerOptions
                   );
                OpenLayers.Control.prototype.initialize.apply(
                    this, arguments
                );
                this.handler = new OpenLayers.Handler.Box(
                    this, {
                        'done': this.trigger
                    }, this.handlerOptions
                );
            },

            trigger: function (e) {
                vector_layer.removeAllFeatures();

                var bottomLeft = map.getLonLatFromPixel({ x: e.left, y: e.bottom });
                var topRight = map.getLonLatFromPixel({ x: e.right, y: e.top });
                var leftCorner = proj4(map.projection.projCode, proj4.WGS84, [bottomLeft.lon, bottomLeft.lat]);
                var rightCorner = proj4(map.projection.projCode, proj4.WGS84, [topRight.lon, topRight.lat]);

                var layerId = $('#withinBoxLayerSelection').val();

                withinBox(layerId, leftCorner, rightCorner);
            }
        });

        function init() {
            var vectorStyle = new OpenLayers.Style({
                fillColor: 'red',
                strokeColor: 'red',
                fillOpacity: 0.6,
                strokeOpacity: 1,
                pointRadius: 8,
            });

            map = new OpenLayers.Map('map', { projection: new OpenLayers.Projection("EPSG:3857") });
            layer = new OpenLayers.Layer.OSM("Simple OSM Map");
            default_points = new OpenLayers.Layer.Vector("defualt points");
            segments = new OpenLayers.Layer.Vector("segments");
            vector_layer = new OpenLayers.Layer.Vector("vector_layer");
            vector_layer.styleMap = new OpenLayers.StyleMap({ 'default': vectorStyle });

            map.addLayers([layer, default_points, segments, vector_layer]);
            map.setCenter(
                new OpenLayers.LonLat(-117.6, 34.07).transform(
                    new OpenLayers.Projection("EPSG:4326"),
                    map.getProjectionObject()
                ), 12
            );

            nearControl = new OpenLayers.Control.NearControl();
            withinBoxControl = new OpenLayers.Control.WithinBox();

            map.addControls([nearControl, withinBoxControl]);
        }

        $(document).ready(function () {
            $('input[name=layer]:radio', '#layerSwitcher').change(function () {
                activateLayer(this.id);
            });

            $('#nearActivation').click(function () {
                if (nearControl.active) {
                    vector_layer.removeAllFeatures();
                    nearControl.deactivate();
                    $('#nearActivation').val('Activate');
                }
                else {
                    nearControl.activate();
                    $('#nearActivation').val('Deactivate');
                }
            });

            $('#withinBoxActivation').click(function () {
                if (withinBoxControl.active) {
                    vector_layer.removeAllFeatures();
                    withinBoxControl.deactivate();
                    $('#withinBoxActivation').val('Activate');
                }
                else {
                    withinBoxControl.activate();
                    $('#withinBoxActivation').val('Deactivate');
                }
            })
        });
    </script>
</head>
<body onload="init()">
    <div id="map" class="smallmap"></div>

    <form id="layerSwitcher" action="">
        Layer switcher:<br />
        <label><input class="layerSwitcherItem" id="none" name="layer" type="radio" checked="checked" />No data</label><br />
        <label><input class="layerSwitcherItem" id="default" name="layer" type="radio" />Points</label><br />
        <label><input class="layerSwitcherItem" id="segments" name="layer" type="radio" />Lines</label><br />
    </form>

    <form id="nearControl" action="">
        <div>
            <label>
                Near control:
                <input id="nearActivation" type="button" value="Activate" />
            </label><br />
            <label>
                Layer:
                <select id="nearLayerSelection">
                    <option value="default">Points</option>
                    <option value="segments">Lines</option>
                </select>
            </label><br />
            <label>
                Minimum distance:
                <input id="minDistance" type="text" value="1000" />
            </label><br />
            <label>
                Maximum distance:
                <input id="maxDistance" type="text" value="20000" />
            </label><br />
        </div>
    </form>
    <form id="boxControl" action="">
        <div>
            <label>
                Box control:
                <input id="withinBoxActivation" type="button" value="Activate" />
            </label><br />
            <label>
                Layer:
                <select id="withinBoxLayerSelection">
                    <option value="default">Points</option>
                    <option value="segments">Lines</option>
                </select>
            </label><br />
        </div>
    </form>
    <script>
    </script>
</body>
</html>